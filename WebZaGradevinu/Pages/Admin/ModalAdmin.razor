@using WebZaGradevinu.Data
@using WebZaGradevinu.Services
@using Microsoft.AspNetCore.Identity;
@inherits OwningComponentBase<AdminService>

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog" style="width:1200px;height:1200px;">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Wide Description </h4>
                <button type="button" class="close" data-dismiss="modal" @onclick="@ModalCancel">&times;</button>
            </div>
            <div class="modal-body" style="display:flex;">
                <div class="container-fluid">
                    <EditForm Model="model" OnValidSubmit="HandleValidSubmit">
                        <div class="form-group">
                            @foreach (var item in model)
                            {
                                <select type="checkbox" class="form-check-input" @bind="@item.Selected" />
                                <label class="form-check-label" for="@item.Selected">
                                    @item.RoleName
                                </label>
                            }
                        </div>
                        <div class="form-group">
                            <button class="btn btn-outline-primary">Spremi</button>
                        </div>     
                    </EditForm>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-info" data-dismiss="modal" @onclick="@ModalCancel">Close</button>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public AppUser UserSelected { get; set; }
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }
    List<AdminService.ManageUserRolesModel> model;

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    protected override async Task OnInitializedAsync()
    {
        model = await Service.GetManageUserRole(UserSelected);
    }
    private async Task HandleValidSubmit()
    {
        await Service.EditRoles(model,UserSelected);
        OnClose.InvokeAsync(false);
    }

    /*protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }*/

}