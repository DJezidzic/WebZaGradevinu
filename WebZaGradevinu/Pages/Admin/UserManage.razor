@using WebZaGradevinu.Data
@using WebZaGradevinu.Services
@using System.IO
@using Microsoft.AspNetCore.Http
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor httpContextAccessor
@inherits OwningComponentBase<AdminService>
@attribute [Authorize(Roles = "Admin")]

<br />


<table class="table table-striped">
    <thead>
        <tr>
            <th>Naziv Tvrtke</th>
            <th>Email</th>
            <th>OIB</th>
            <th>Promjena Uloge</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in users)
        {
            <tr>
                <td>@user.NazivTvrtke</td>
                <td>@user.Email</td>
                <td>@user.OIB</td>
                <td>
                    <button type="button" class="btn btn-primary" @onclick="()=>ManageRole(user)">Promjeni ulogu</button>
                </td>
            </tr>
        }
    </tbody>
</table>



@if (UserRoleShowToModal)
{
    //<ModalAdmin UserSelected="@UserSelected" OnClose="@OnModalClose"></ModalAdmin>
    <br />
    <h3>Dodavanje/uklanjanje administratorske uloge</h3>
    <div class="container-fluid">
        <EditForm Model="model" OnValidSubmit="HandleValidSubmit">
            <div class="form-group">
                <label for="chck">Administratorska uloga</label>
                <InputCheckbox id="chck" type="checkbox" @bind-Value="model.SelectedAdmin"></InputCheckbox>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-outline-primary">Spremi</button>
                <button class="btn btn-outline-danger" @onclick="()=>OnModalClose()">Otkaži</button>
            </div>
        </EditForm>
    </div>
}

@code {

    List<AppUser> users;
    AppUser UserSelected;
    bool UserRoleShowToModal = false;
    AdminService.ManageUserRolesModel model;
    private async Task HandleValidSubmit()
    {
        await Service.EditRoles(model, UserSelected);
    }

    protected override async Task OnInitializedAsync()
    {
        users = Service.GetUsers();
    }

    public async Task ManageRole(AppUser user)
    {
        UserSelected = user;
        model = await Service.GetManageUserRole(UserSelected);
        UserRoleShowToModal = true;
    }

    private async Task OnModalClose()
    {
        UserRoleShowToModal = false;
        StateHasChanged();
    }

}
