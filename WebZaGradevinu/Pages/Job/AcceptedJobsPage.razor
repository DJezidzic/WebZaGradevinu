@page "/AcceptedJobsPage"
@using WebZaGradevinu.Data
@using WebZaGradevinu.Services
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject AuthenticationStateProvider authenticationStateProvider
@inherits OwningComponentBase<JobsService>
@inject ToastService toastService
@attribute [Authorize(Roles = "Admin,User")]
<h3>Prihvaćeni poslovi</h3>
<hr />

<MudBreadcrumbs Items="_items">
</MudBreadcrumbs>

@if (jobload != null)
{<table style="margin-top: 20px;" class="table table-condensed" id="tbl-companies">
        <thead>
            <tr>
                <th>Naziv posla</th>
                <th>Vrijeme prihvata posla</th>
                <th>Status posla</th>
                <th>Vrijeme završetka posla</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var jobs in jobload)
            {
                <tr>
                    <td>@jobs.Jobs.Name</td>
                    <td>@jobs.AcceptedTime</td>
                    @if (jobs.JobisFinished == true)
                    {
                        <td>Završen</td>
                    }
                    else
                    {
                        <td>Nije završen</td>
                    }
                    @if (jobs.JobisFinished == true)
                    {
                        <td>@jobs.FinishedTime</td>
                    }
                    else
                    {
                        <td>Neodređeno</td>
                    }
                    @if (jobs.JobisFinished == false)
                    {
                        <td>
                            <button type="button" class="btn btn-success" @onclick="() => FinishTheJob(jobs.Id)"><i class="oi oi-check"></i>Završi posao</button>
                        </td>
                    }
                    @if (jobs.JobisFinished == false)
                    {
                        <td>
                            <button type="button" class="btn btn-danger" @onclick="() => DeleteJobFromFinishedList(jobs)"><i class="oi oi-delete"></i>Ukloni posao</button>
                        </td>
                    }
                </tr>
            }



        </tbody>
    </table>
}
else
{ <p>Trenutno nemate poslova na kojim ste započeli radove.</p>}



@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem> {
    new BreadcrumbItem("Poslovi", href: "/Poslovi"),
    new BreadcrumbItem("Prihvaćeni poslovi", href: "/AcceptedJobsPage"),
    };

    public string UserName;
    List<AcceptedJobs> jobload;
    protected override async Task OnInitializedAsync()
    {
        //UserName = httpContextAccessor.HttpContext.User.Identity.Name;
        var state = await authenticationStateProvider.GetAuthenticationStateAsync();
        UserName = state.User.Identity.Name;
        jobload = Service.GetAcceptedJobsList(UserName);
    }

    public async Task FinishTheJob(int id)
    {
        await Service.FinishJob(id);
        toastService.ShowToast("Uspješno ste ažurirali tablicu", ToastLevel.Success);
        jobload = Service.GetAcceptedJobsList(UserName);
    }

    public async Task DeleteJobFromFinishedList(AcceptedJobs accjob)
    {
        await Service.DeleteFinishListJob(accjob);
        toastService.ShowToast("Uspješno ste ukonili posao sa liste", ToastLevel.Success);
        jobload = Service.GetAcceptedJobsList(UserName);
    }

}
