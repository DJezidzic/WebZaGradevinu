@using WebZaGradevinu.Data
@using WebZaGradevinu.Services
@using Microsoft.AspNetCore.Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inherits OwningComponentBase<JobsService>
@attribute [Authorize(Roles = "Admin,User")]
<hr />
<div class="row" style="margin-top: 20px;">
    <div class="col-md-12">
        <button class="btn btn-outline-primary" @onclick="@NavigateToNewOffer"><i class="oi oi-plus"></i>Dodaj novi posao</button>
    </div>
</div>
<br />
<div class="input-group">
    <input type="text" id="txtSearch" placeholder="Tražite svoj posao po nazivu..." @bind-value="SearchTerm" @bind-value:event="oninput" @onkeyup="@SearchIt" @onchange="@OnInitializedAsync" class="form-control w-15" />
</div>
@if (jobload != null)
{
    <table class="table table-condensed" id="tbl-companies">
        <thead>
            <tr>
                <th>Prostorija</th>
                <th>Opis</th>
                <th>Ime tvrtke</th>
                <th>Posao</th>
                <th>Pocetak radova</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in jobload)
            {
                <tr>
                    <td>@item.Rooms</td>
                    <td><a @onclick="() => ShowModalJobDescrip(item)">@item.Description</a></td>
                    <td><p>@item.Company.NazivTvrtke</p></td>
                    <td><p>@item.Name</p></td>
                    <td><p>@item.PocetakRadova.ToLongDateString()</p></td>
                    <td><button class="btn btn-success" @onclick="() => NavigateToEditOffer(item.ID)">Edit</button></td>
                    <td><button class="btn btn-danger" type="button" @onclick="(() => OnDeleteJob(item.ID))">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
    @if (WideDescripShowToModal)
    {
        <ModalCompJob modaladress="@modaladress" modalgrad="@modalgrad" WideDescrip="@wideDescrip" OnClose="@OnModalClose"></ModalCompJob>
    }
}
else
{//<div class="loader"></div>
    <p>Trenutno nemate dodanih poslova</p>
}

@code {

    private void NavigateToNewOffer() { NavigationManager.NavigateTo("NewOffer"); }
    private void NavigateToEditOffer(int id) { NavigationManager.NavigateTo("Poslovi/EditOffer" + "/" + id); }
    List<Jobs> jobload;
    public string UserName;

    bool WideDescripShowToModal = false;
    string wideDescrip;
    string modaladress;
    int modalgrad;
    string SearchTerm { get; set; } = "";
    void SearchIt()
    {
        jobload = Service.DisplaySearchedMyJobs(UserName, SearchTerm);
    }
    void ShowModalJobDescrip(Jobs job)
    {
        wideDescrip = job.WideDescription;
        modaladress = job.Adresa;
        modalgrad = job.CityId;
        WideDescripShowToModal = true;
    }
    protected async Task OnDeleteJob(int id)
    {
        await Service.OnDelete(id);
        jobload = Service.DisplayMyJobs(UserName);
    }
    protected override async Task OnInitializedAsync()
    {
        var state = await authenticationStateProvider.GetAuthenticationStateAsync();
        UserName = state.User.Identity.Name;
        jobload = Service.DisplaySearchedMyJobs(UserName, SearchTerm);
    }

    private async Task OnModalClose(bool accepted)
    {
        WideDescripShowToModal = false;
        StateHasChanged();
    }

}
