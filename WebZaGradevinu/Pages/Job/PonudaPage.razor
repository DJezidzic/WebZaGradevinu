@using WebZaGradevinu.Data
@using WebZaGradevinu.Services
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inherits OwningComponentBase<JobsService>
@inject ToastService toastService
@attribute [Authorize(Roles = "Admin,User")]

<hr />

<div class="row" style="margin-top: 20px;">
    <div class="col-md-12">
        <button class="btn btn-outline-primary" @onclick="@NavigateToNewOffer"><i class="oi oi-plus"></i>Dodaj novi posao</button>
    </div>
</div>
<br />
<div class="input-group">
    <input type="text" id="txtSearch" placeholder="Tražite posao po nazivu ili firmi koja ga je objavila ..." @bind-value="SearchTerm" @bind-value:event="oninput" @onkeyup="@SearchIt" @onchange="@OnInitializedAsync" class="form-control w-15" />
</div>

@if (jobload != null)
{<table style="margin-top: 20px;" class="table table-condensed" id="tbl-companies">
        <thead>
            <tr>
                <th>Prostorija</th>
                <th>Opis</th>
                <th>Ime tvrtke</th>
                <th>Posao</th>
                <th>Pocetak radova</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in jobload)
            {
                <tr>
                    <td>@item.Rooms</td>
                    <td>
                        <a @onclick="() => ShowModalJobDescrip(item)">@item.Description</a>
                    </td>
                    <td>
                        <p>@item.Company.NazivTvrtke</p>
                    </td>
                    <td>
                        <p>@item.Name</p>
                    </td>
                    <td>
                        <p>@item.PocetakRadova.ToLongDateString()</p>
                    </td>
                    <td>
                        <button type="button" class="btn btn-success" @onclick="()=> AcceptJobFunction(item)"><i class="oi oi-check"></i>Prihvaćam</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (WideDescripShowToModal)
    {
        <ModalCompJob modaladress="@modaladress" modalgrad="@modalgrad" WideDescrip="@wideDescrip" OnClose="@OnModalClose"></ModalCompJob>
    }

}
else
{ <div class="loader"></div>}


@code {

    private void NavigateToNewOffer() { NavigationManager.NavigateTo("NewOffer"); }
    List<Jobs> jobload;
    public string UserName;

    bool WideDescripShowToModal = false;
    string wideDescrip;
    string modaladress;
    int modalgrad;
    string SearchTerm { get; set; } = "";
    void SearchIt()
    {
        jobload = Service.DisplaySearchedJobs(UserName, SearchTerm);
    }

    private async Task AcceptJobFunction(Jobs job)
    {
        await Service.AcceptJob(job, UserName);
        toastService.ShowToast("Uspješno ste dodali posao na listu", ToastLevel.Success);
        jobload = Service.DisplayJobs(UserName);

    }

    void ShowModalJobDescrip(Jobs job)
    {
        wideDescrip = job.WideDescription;
        modaladress = job.Adresa;
        modalgrad = job.CityId;
        WideDescripShowToModal = true;
    }
    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        UserName = state.User.Identity.Name;
        jobload = Service.DisplaySearchedJobs(UserName, SearchTerm);
    }

    private async Task OnModalClose(bool accepted)
    {
        WideDescripShowToModal = false;
        StateHasChanged();
    }

}
